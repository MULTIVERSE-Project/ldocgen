[{"names_hierarchy":["mvp","logger"],"type":"module","description":"","sections":{"by_name":{}},"package":"mvp","kind":"modules","modifiers":{},"items":[{"description":"","parameter":"param","section":"function","inferred":true,"paramsMap":{"...":" The message to log.","level":" The log level. See @{mvp} and @{Init} for available level enums."},"names_hierarchy":["mvp","logger","Log"],"type":"function","tags":{"doc":[".\/docs\/examples\/test1.md",".\/docs\/examples\/test2.md"],"realm":["shared"]},"subparams":{},"modifiers":{"return":{},"doc":[{},{}],"usage":[{}],"realm":[{}],"param":{"1":{"type":"LOG_ENUM"},"2":{},"...":{},"level":{"type":"LOG_ENUM"}}},"paramsList":["level","..."],"kind":"functions","usage":["mvp.logger.Log(mvp.LOG_INFO, 'Hello, world!')\n"],"summary":"Logs a message to all adapters.","args":"(level, ...)","name":"mvp.logger.Log","lineno":21,"params":{"1":"level","2":"...","map":{"...":" The message to log.","level":" The log level. See @{mvp} and @{Init} for available level enums."}}},{"description":"","parameter":"param","section":"function","inferred":true,"paramsMap":{},"names_hierarchy":["mvp","logger","Init"],"type":"function","tags":{"internal":[""],"realm":["shared"]},"subparams":{},"modifiers":{"param":{},"internal":[{}],"return":{},"realm":[{}]},"paramsList":{},"kind":"functions","name":"mvp.logger.Init","args":"()","summary":"Initializes the logger.","lineno":40,"params":{"map":{}}}],"tags":{},"name":"mvp.logger","mod_name":"logger","summary":"Logging module for Terminal.","inferred":true,"lineno":6,"file":"d:\\_.projects\\_multiverse_project\\docgen\\lua\\mvp\\core\\logger\\sh_logger.lua"},{"names_hierarchy":["mvp","meta","logger"],"type":"classmod","description":" This is the base class for all logger implementations. You can create your own logger by inheriting from this class.\n\nExample:\n```\n    local logger = mvp.meta.logger:New()\n\n    function logger:Init()\n        print(\"Logger initialized\")\n    end\n\n    function logger:Log(timestamp, level, ...)\n        print(timestamp, level, ...)\n    end\n\n    return logger\n```\n⚠️ **Warning:** Please remember to return the logger instance at the end of the file. Otherwise it won't be loaded.\n\nAll your implementations of adapters should go under `mvp\/adapters\/` and should be named `mvp\/adapters\/<name>.lua` wihtout realm prefix. All adapters are loaded automatically on shared realm.","sections":{"by_name":{}},"package":"mvp.meta","kind":"classes","modifiers":{},"items":[{"description":"","parameter":"param","section":"function","inferred":true,"paramsMap":{},"ret":["A new logger adapter."],"type":"function","tags":{"realm":["shared"]},"subparams":{},"paramsList":{},"modifiers":{"param":{},"realm":[{}],"return":[{"type":"mvp.meta.logger"}]},"names_hierarchy":["mvp","meta","logger","New"],"kind":"functions","retgroups":[{"1":{"text":"A new logger adapter.","mods":{"type":"mvp.meta.logger"},"type":"mvp.meta.logger"},"g":0}],"name":"mvp.meta.logger:New","args":"()","summary":"Create a new logger adapter.","lineno":33,"params":{"map":{}}},{"description":"\n Meant to be overridden by the logger implementation.","parameter":"param","section":"function","inferred":true,"paramsMap":{},"names_hierarchy":["mvp","meta","logger","Init"],"type":"function","tags":{"realm":["shared"]},"subparams":{},"modifiers":{"param":{},"return":{},"realm":[{}]},"paramsList":{},"kind":"functions","name":"mvp.meta.logger:Init","args":"()","summary":"Initialize the logger.","lineno":45,"params":{"map":{}}},{"description":"\n Meant to be overridden by the logger implementation.","parameter":"param","section":"function","inferred":true,"paramsMap":{"timestamp":" The timestamp of the log message.","...":" The message to log.","level":" The log level of the message."},"names_hierarchy":["mvp","meta","logger","Log"],"type":"function","tags":{"realm":["shared"]},"subparams":{},"modifiers":{"return":{},"realm":[{}],"param":{"1":{"type":"string"},"2":{},"3":{},"timestamp":{"type":"string"},"...":{},"level":{}}},"paramsList":["timestamp","level","..."],"kind":"functions","name":"mvp.meta.logger:Log","args":"(timestamp, level, ...)","summary":"Log a message.","lineno":55,"params":{"1":"timestamp","2":"level","3":"...","map":{"timestamp":" The timestamp of the log message.","...":" The message to log.","level":" The log level of the message."}}}],"tags":{},"name":"mvp.meta.logger","mod_name":"logger","summary":"Logger adapter.","inferred":true,"lineno":25,"file":"d:\\_.projects\\_multiverse_project\\docgen\\lua\\mvp\\core\\logger\\sh_logger.meta.lua"},{"names_hierarchy":["mvp","loader"],"type":"module","description":"","sections":{"by_name":{}},"package":"mvp","kind":"modules","modifiers":{},"items":[{"description":" Must be called on both the client and server.","parameter":"param","section":"function","inferred":true,"paramsMap":{"fromLuaFolder":" Whether or not ignore relative path and load from the lua\/ folder directly.","path":" The path to the file, relative to the mvp\/ folder."},"names_hierarchy":["mvp","loader","LoadClientFile"],"type":"function","tags":{"realm":["shared"]},"subparams":{},"modifiers":{"return":{},"realm":[{}],"param":{"1":{"type":"string"},"2":{"opt":"false","optchain":"false","type":"bool"},"fromLuaFolder":{"opt":"false","optchain":"false","type":"bool"},"path":{"type":"string"}}},"paramsList":["path","fromLuaFolder"],"kind":"functions","name":"mvp.loader.LoadClientFile","args":"(path[, fromLuaFolder=false])","summary":"Loads a file for the client.","lineno":25,"params":{"1":"path","2":"fromLuaFolder","map":{"fromLuaFolder":" Whether or not ignore relative path and load from the lua\/ folder directly.","path":" The path to the file, relative to the mvp\/ folder."}}},{"description":" Must be called on both the client and server.","parameter":"param","section":"function","inferred":true,"paramsMap":{"fromLuaFolder":" Whether or not ignore relative path and load from the lua\/ folder directly.","path":" The path to the file, relative to the mvp\/ folder."},"names_hierarchy":["mvp","loader","LoadSharedFile"],"type":"function","tags":{"realm":["shared"]},"subparams":{},"modifiers":{"return":{},"realm":[{}],"param":{"1":{"type":"string"},"2":{"opt":"false","optchain":"false","type":"bool"},"fromLuaFolder":{"opt":"false","optchain":"false","type":"bool"},"path":{"type":"string"}}},"paramsList":["path","fromLuaFolder"],"kind":"functions","name":"mvp.loader.LoadSharedFile","args":"(path[, fromLuaFolder=false])","summary":"Loads a file fir server and client.","lineno":41,"params":{"1":"path","2":"fromLuaFolder","map":{"fromLuaFolder":" Whether or not ignore relative path and load from the lua\/ folder directly.","path":" The path to the file, relative to the mvp\/ folder."}}},{"description":" Must be called on the server.","parameter":"param","section":"function","inferred":true,"paramsMap":{"fromLuaFolder":" Whether or not ignore relative path and load from the lua\/ folder directly.","path":" The path to the file, relative to the mvp\/ folder."},"names_hierarchy":["mvp","loader","LoadServerFile"],"type":"function","tags":{"realm":["shared"]},"subparams":{},"modifiers":{"return":{},"realm":[{}],"param":{"1":{"type":"string"},"2":{"opt":"false","optchain":"false","type":"bool"},"fromLuaFolder":{"opt":"false","optchain":"false","type":"bool"},"path":{"type":"string"}}},"paramsList":["path","fromLuaFolder"],"kind":"functions","name":"mvp.loader.LoadServerFile","args":"(path[, fromLuaFolder=false])","summary":"Loads a file for the server.","lineno":57,"params":{"1":"path","2":"fromLuaFolder","map":{"fromLuaFolder":" Whether or not ignore relative path and load from the lua\/ folder directly.","path":" The path to the file, relative to the mvp\/ folder."}}},{"description":" If the realm is not specified, it will try to guess it based on the file name.\n\n `sv_` prefix will load the file for the server only,\n `cl_` prefix will load the file for the client only,\n in other cases, it will load the file for both the server and client (`shared`).\n ","parameter":"param","section":"function","inferred":true,"paramsMap":{"path":" The path to the file, relative to the mvp\/ folder.","fromLuaFolder":" Whether or not ignore relative path and load from the lua\/ folder directly.","realm":" The realm to load the file for. Can be `server`, `client` or `shared`."},"names_hierarchy":["mvp","loader","LoadFile"],"type":"function","tags":{"realm":["shared"]},"subparams":{},"modifiers":{"return":{},"realm":[{}],"param":{"1":{"type":"string"},"2":{"opt":true,"optchain":true,"type":"string"},"3":{"opt":"false","optchain":"false","type":"bool"},"path":{"type":"string"},"fromLuaFolder":{"opt":"false","optchain":"false","type":"bool"},"realm":{"opt":true,"optchain":true,"type":"string"}}},"paramsList":["path","realm","fromLuaFolder"],"kind":"functions","name":"mvp.loader.LoadFile","args":"(path[, realm[, fromLuaFolder=false]])","summary":"Loads a file based on the realm.","lineno":77,"params":{"1":"path","2":"realm","3":"fromLuaFolder","map":{"path":" The path to the file, relative to the mvp\/ folder.","fromLuaFolder":" Whether or not ignore relative path and load from the lua\/ folder directly.","realm":" The realm to load the file for. Can be `server`, `client` or `shared`."}}},{"description":" @{LoadFile} If the realm is not specified, it will try to guess it based on the file name. See `mvp.loader.LoadFile` for more info about file naming.","parameter":"param","section":"function","inferred":true,"paramsMap":{"path":" The path to the folder, relative to the mvp\/ folder.","fromLuaFolder":" Whether or not ignore relative path and load from the lua\/ folder directly.","realm":" The realm to load the files for. Can be `server`, `client` or `shared`."},"names_hierarchy":["mvp","loader","LoadFolder"],"type":"function","tags":{"realm":["shared"]},"subparams":{},"modifiers":{"return":{},"realm":[{}],"param":{"1":{"type":"string"},"2":{"opt":true,"optchain":true,"type":"string"},"3":{"opt":"false","optchain":"false","type":"bool"},"path":{"type":"string"},"fromLuaFolder":{"opt":"false","optchain":"false","type":"bool"},"realm":{"opt":true,"optchain":true,"type":"string"}}},"paramsList":["path","realm","fromLuaFolder"],"kind":"functions","name":"mvp.loader.LoadFolder","args":"(path[, realm[, fromLuaFolder=false]])","summary":"Loads all files in folder recursively.","lineno":94,"params":{"1":"path","2":"realm","3":"fromLuaFolder","map":{"path":" The path to the folder, relative to the mvp\/ folder.","fromLuaFolder":" Whether or not ignore relative path and load from the lua\/ folder directly.","realm":" The realm to load the files for. Can be `server`, `client` or `shared`."}}}],"tags":{},"name":"mvp.loader","mod_name":"loader","summary":"This is utility module for loading files through the Terminal\n by default, it will load files from the mvp\/ folder.","inferred":true,"lineno":5,"file":"d:\\_.projects\\_multiverse_project\\docgen\\lua\\mvp\\core\\sh_loader.lua"},{"names_hierarchy":["mvp"],"type":"module","description":"","sections":{"by_name":{}},"package":"","kind":"modules","modifiers":{},"items":[{"description":" Note that colors should be used only for console printing, not for HUD or other stuff.","parameter":"field","section":"table","inferred":true,"paramsMap":{"YELLOW":" Color Yellow color","LOG_WARNING":" Log level for warning messages","LOG_DEBUG":" Log level for debug messages","RED":" Color Red color","BLUE":" Color Blue color","LOG_ERROR":" Log level for error messages","WHITE":" Color White color","BLACK":" Color Black color","CYAN":" Color Cyan color","LOG_INFO":" Log level for info messages","GREEN":" Color Green color","ORANGE":" Color Orange color","GRAY":" Color Gray color"},"names_hierarchy":["mvp"],"type":"table","tags":{"realm":["shared"]},"subparams":{},"modifiers":{"return":{},"realm":[{}],"field":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"YELLOW":{},"LOG_WARNING":{},"LOG_DEBUG":{},"RED":{},"BLUE":{},"LOG_ERROR":{},"WHITE":{},"BLACK":{},"CYAN":{},"LOG_INFO":{},"GREEN":{},"ORANGE":{},"GRAY":{}}},"paramsList":["LOG_DEBUG","LOG_INFO","LOG_WARNING","LOG_ERROR","WHITE","BLACK","RED","GREEN","BLUE","CYAN","YELLOW","ORANGE","GRAY"],"kind":"tables","name":"mvp","args":"(LOG_DEBUG, LOG_INFO, LOG_WARNING, LOG_ERROR, WHITE, BLACK, RED, GREEN, BLUE, CYAN, YELLOW, ORANGE, GRAY)","summary":"Table with all mvp functions and variables, also contains default colors as well as log levels.","lineno":21,"params":{"1":"LOG_DEBUG","2":"LOG_INFO","3":"LOG_WARNING","4":"LOG_ERROR","5":"WHITE","6":"BLACK","7":"RED","8":"GREEN","9":"BLUE","10":"CYAN","11":"YELLOW","12":"ORANGE","13":"GRAY","map":{"YELLOW":" Color Yellow color","LOG_WARNING":" Log level for warning messages","LOG_DEBUG":" Log level for debug messages","RED":" Color Red color","BLUE":" Color Blue color","LOG_ERROR":" Log level for error messages","WHITE":" Color White color","BLACK":" Color Black color","CYAN":" Color Cyan color","LOG_INFO":" Log level for info messages","GREEN":" Color Green color","ORANGE":" Color Orange color","GRAY":" Color Gray color"}}}],"tags":{},"name":"mvp","mod_name":"mvp","summary":"","inferred":true,"lineno":3,"file":"d:\\_.projects\\_multiverse_project\\docgen\\lua\\mvp\\init\\sh.lua"}]